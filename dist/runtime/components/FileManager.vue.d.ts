import { Vue } from 'nuxt-property-decorator';
import { IParams, IPrinterInfo } from '../../types/common';
import { FileStateFile } from '../../types/helpers';
export default class fileManager extends Vue {
    closeable: boolean;
    noPrint: boolean;
    loadings: string[];
    diskUsage: {};
    validGcodeExtensions: string[];
    params: IParams;
    printerInfo: IPrinterInfo;
    currentPath: string;
    optionsSync: {
        sortBy: string[];
        sortDesc: boolean[];
        showHiddenFiles: boolean;
        itemsPerPage: number;
        hideMetadataColums: String[];
    };
    filesForCopyDialogSync: [];
    filetree: [];
    $refs: {
        fileUpload: HTMLInputElement;
        inputFieldRenameFile: HTMLInputElement;
        inputFieldCreateDirectory: HTMLInputElement;
        inputFieldRenameDirectory: HTMLInputElement;
    };
    initialPath: string;
    printMode: string;
    private search;
    private files;
    private dropzone;
    private draggingFile;
    private uploadSnackbar;
    private dialogCreateDirectory;
    private contextMenu;
    private dialogPrintFile;
    private dialogRenameFile;
    private dialogCopy;
    private dialogRenameDirectory;
    private dialogDeleteDirectory;
    private input_rules;
    get headers(): ({
        text: string;
        value: string;
        align: string;
        configable: boolean;
        visible: boolean;
        filterable: boolean;
    } | {
        text: any;
        value: string;
        align: string;
        configable: boolean;
        visible: boolean;
        filterable?: undefined;
    })[];
    get filteredHeaders(): ({
        text: string;
        value: string;
        align: string;
        configable: boolean;
        visible: boolean;
        filterable: boolean;
    } | {
        text: any;
        value: string;
        align: string;
        configable: boolean;
        visible: boolean;
        filterable?: undefined;
    })[];
    get configHeaders(): ({
        text: string;
        value: string;
        align: string;
        configable: boolean;
        visible: boolean;
        filterable: boolean;
    } | {
        text: any;
        value: string;
        align: string;
        configable: boolean;
        visible: boolean;
        filterable?: undefined;
    })[];
    clickUploadButton(): void;
    createDirectory(): void;
    createDirectoryAction(): void;
    refreshFileList(): void;
    uploadFile(): Promise<void>;
    doUploadFile(file: File): Promise<unknown>;
    advancedSearch(value: string | number, search: string): boolean;
    refreshMetadata(data: any): void;
    clickRowGoBack(): void;
    dragOverFilelist(e: any, row: any): void;
    dragLeaveFilelist(e: any): void;
    dragDropFilelist(e: any, row: any): Promise<void>;
    showContextMenu(e: any, item: FileStateFile): void;
    clickRow(item: FileStateFile, force?: boolean): void;
    created(): void;
    loadPath(): void;
    filetreeChanged(newVal: FileStateFile[]): void;
    currentPathChanged(newVal: string): void;
    dragFile(e: Event, item: FileStateFile): void;
    dragendFile(e: Event): void;
    getSmallThumbnail(item: FileStateFile): string;
    getBigThumbnail(item: FileStateFile): string;
    getThumbnailWidth(item: FileStateFile): number;
    changeMetadataVisible(name: string): void;
    dragOverUpload(e: Event): void;
    dragLeaveUpload(e: Event): void;
    dragDropUpload(e: any): Promise<void>;
    cancelUpload(): void;
    downloadFile(): void;
    renameFile(item: FileStateFile): void;
    renameFileAction(): void;
    renameDirectory(item: FileStateFile): void;
    renameDirectoryAction(): void;
    removeFile(): void;
    deleteDirectory(item: FileStateFile): void;
    deleteDirectoryAction(): void;
    startPrint(filename?: string): void;
    isUsb(item: FileStateFile): boolean;
    isUsbInDialog(item: FileStateFile): boolean;
    copyFile(item: FileStateFile, action: 'copy' | 'move'): void;
    copyFileAction(): void;
    clickCopyItem(item: any): void;
    upClick(): void;
    getDate(item: any): any;
    mounted(): void;
}
